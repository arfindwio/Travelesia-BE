// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 Int            @id @default(autoincrement())
  email              String         @unique
  password           String?
  otp                String?
  otpCreatedAt       DateTime?
  isVerified         Boolean        @default(false)
  role               Role           @default(USER)
  resetPasswordToken String?
  googleId           String?
  createdAt          String
  updatedAt          String
  userProfile        UserProfile?
  notification       Notification[]
  booking            Booking[]
}

model UserProfile {
  id             Int     @id @default(autoincrement())
  profilePicture String?
  fullName       String
  phoneNumber    String? @unique
  city           String?
  country        String?
  createdAt      String
  updatedAt      String
  userId         Int     @unique
  user           User    @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int     @id @default(autoincrement())
  title     String
  message   String
  isRead    Boolean @default(false)
  createdAt String
  updatedAt String
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
}

model Airport {
  id          Int        @id @default(autoincrement())
  airportName String
  continent   String
  country     String
  city        String
  createdAt   String
  updatedAt   String
  terminal    Terminal[]
}

model Terminal {
  id           Int      @id @default(autoincrement())
  terminalName String
  createdAt    String
  updatedAt    String
  airportId    Int
  airport      Airport  @relation(fields: [airportId], references: [id])
  departure    Flight[] @relation("DepartureFlight")
  arrival      Flight[] @relation("ArrivalFlight")
}

model Airline {
  id           Int      @id @default(autoincrement())
  airlineName  String
  baggage      Int
  cabinBaggage Int
  createdAt    String
  updatedAt    String
  flight       Flight[]
}

model Promotion {
  id        Int      @id @default(autoincrement())
  discount  Decimal
  startDate String
  endDate   String
  createdAt String
  updatedAt String
  flight    Flight[]
}

model Flight {
  id                Int        @id @default(autoincrement())
  flightCode        String
  flightImg         String
  seatClass         String
  price             Int
  departureTime     String
  arrivalTime       String
  duration          Int
  createdAt         String
  updatedAt         String
  airlineId         Int
  airline           Airline    @relation(fields: [airlineId], references: [id])
  promotionId       Int?
  promotion         Promotion? @relation(fields: [promotionId], references: [id])
  departureId       Int
  departureTerminal Terminal   @relation("DepartureFlight", fields: [departureId], references: [id])
  arrivalId         Int
  arrivalTerminal   Terminal   @relation("ArrivalFlight", fields: [arrivalId], references: [id])
  seat              Seat[]
  booking           Booking[]
}

model Seat {
  id         Int      @id @default(autoincrement())
  seatNumber String
  isBooked   Boolean  @default(false)
  createdAt  String
  updatedAt  String
  flightId   Int
  flight     Flight   @relation(fields: [flightId], references: [id])
  bookingId  Int?
  booking    Booking? @relation(fields: [bookingId], references: [id])
}

model Booking {
  id            Int         @id @default(autoincrement())
  bookingCode   String      @unique
  adult         Int
  child         Int
  baby          Int
  amount        Int
  status        String      @default("Unpaid")
  methodPayment String?
  createdAt     String
  updatedAt     String
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  flightId      Int
  flight        Flight      @relation(fields: [flightId], references: [id])
  passenger     Passenger[]
  seat          Seat[]
}

model Passenger {
  id               Int     @id @default(autoincrement())
  title            String
  fullName         String
  familyName       String?
  bornDate         String
  citizen          String
  identityNumber   String
  publisherCountry String
  validUntil       String
  createdAt        String
  updatedAt        String
  bookingId        Int
  booking          Booking @relation(fields: [bookingId], references: [id])
}
